---
const features = [
  {
    title: "Personalized and Tailored Paths",
    description:
      "Say goodbye to one-size-fits-all: METT analyzes your strengths and weaknesses, building a personalized blueprint for exam success.",
    buttonText: "Start Now",
    image: "/imgs/Personalized-Paths.png",
  },
  {
    title: "Detailed Analysis",
    description:
      "METT keeps track of your progress, and provides detailed analysis to help you understand your strengths and weaknesses.",
    buttonText: "Start Now",
    image: "/imgs/Detailed-Stats.png",
  },
  {
    title: "Step-by-Step Guidance",
    description:
      "METT provides step-by-step study guides to help you prepare for your exam.",
    buttonText: "Start Now",
    image: "/imgs/Guides.png",
  },
];
---

<section class="relative py-16 md:py-32 overflow-hidden" id="features">
  <div class="mx-auto px-8 md:px-12 lg:px-24">
    {
      features.map((feature, index) => (
        <div class="feature-container mb-16 md:mb-32 last:mb-0">
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center">
            <div
              class="feature-content"
              class:list={["space-y-8", index % 2 === 1 && "lg:order-2"]}
            >
              <p class="text-gray-400 text-sm tracking-wider uppercase">
                Products
              </p>
              <h2 class="text-4xl md:text-5xl text-white">{feature.title}</h2>
              <p class="text-gray-300 font-light text-base md:text-xl leading-relaxed">
                {feature.description}
              </p>
              <a
                href="#"
                class="inline-flex items-center px-6 py-3 rounded-lg bg-gray-800 hover:bg-gray-700 text-white transition-colors"
              >
                {feature.buttonText}
              </a>
            </div>

            <div
              class="feature-image-wrapper"
              class:list={["relative", index % 2 === 1 && "lg:order-1"]}
            >
              <div class="relative aspect-[4/3] rounded-2xl overflow-hidden">
                <div class="absolute inset-0 rounded-2xl p-[1px] bg-gradient-to-b from-gray-700/50 to-gray-800/50">
                  <div class="absolute inset-0 rounded-2xl bg-gray-900" />
                </div>

                <div class="relative h-full w-full rounded-2xl overflow-hidden">
                  <img
                    src={feature.image}
                    alt="Dashboard preview"
                    class="w-full h-full object-cover"
                  />
                </div>

                <div class="absolute inset-0 pointer-events-none">
                  <div class="absolute w-full h-full bg-gradient-to-t from-gray-900/40 to-transparent" />
                </div>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</section>

<style>
  .feature-container {
    opacity: 0;
    transform: translateY(20px);
  }

  .feature-content {
    opacity: 0;
    transform: translateX(-20px);
  }

  .feature-image-wrapper {
    opacity: 0;
    transform: translateX(20px);
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeInRight {
    from {
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  const observerOptions = {
    root: null,
    rootMargin: "0px",
    threshold: 0.1,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const container = entry.target;
        const content = container.querySelector(".feature-content");
        const image = container.querySelector(".feature-image-wrapper");
        (container as HTMLElement).style.animation =
          "fadeInUp 0.6s ease-out forwards";
        if (content) {
          (content as HTMLElement).style.animation =
            "fadeInLeft 0.6s ease-out 0.2s forwards";
        }
        if (image) {
          (image as HTMLElement).style.animation =
            "fadeInRight 0.6s ease-out 0.4s forwards";
        }
      }
    });
  }, observerOptions);

  document.querySelectorAll(".feature-container").forEach((container) => {
    observer.observe(container);
  });
</script>
